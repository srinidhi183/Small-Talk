{"created": 1758549011.220492, "duration": 3.02070951461792, "exitcode": 0, "root": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main", "environment": {}, "summary": {"passed": 20, "xfailed": 5, "total": 25, "collected": 25}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_llm_tils_edge_cases.py", "type": "Module"}]}, {"nodeid": "tests/test_llm_tils_edge_cases.py", "outcome": "passed", "result": [{"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_missing_api_key", "type": "Function", "lineno": 48}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unexpected_shapes_empty_choices", "type": "Function", "lineno": 55}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unexpected_shapes_missing_message", "type": "Function", "lineno": 62}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_non_string_content", "type": "Function", "lineno": 69}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unicode_and_strip", "type": "Function", "lineno": 78}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_temperature_and_params_passed", "type": "Function", "lineno": 87}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_missing_template_file", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_encoding_issues", "type": "Function", "lineno": 104}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_placeholder_collision_raises", "type": "Function", "lineno": 125}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_subcategories_none_and_strings_ok", "type": "Function", "lineno": 136}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_handles_newlines_and_commas", "type": "Function", "lineno": 149}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_default_api_key_path_headers", "type": "Function", "lineno": 190}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_http_error_returns_json_anyway", "type": "Function", "lineno": 199}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_non_json_response_raises", "type": "Function", "lineno": 205}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_unexpected_json_shape_passthrough", "type": "Function", "lineno": 211}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_payload_correctness", "type": "Function", "lineno": 217}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_headers_when_api_key_param_used", "type": "Function", "lineno": 227}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_root_array", "type": "Function", "lineno": 236}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_with_cpp_style_comments", "type": "Function", "lineno": 242}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_single_quotes", "type": "Function", "lineno": 247}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_python_literals", "type": "Function", "lineno": 252}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_trailing_comma_in_array", "type": "Function", "lineno": 257}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_triple_backticks_inside_strings_not_eaten", "type": "Function", "lineno": 262}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_multiple_concatenated_objects", "type": "Function", "lineno": 267}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_non_string_input_behavior", "type": "Function", "lineno": 272}]}], "tests": [{"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_missing_api_key", "lineno": 48, "outcome": "passed", "keywords": ["test_get_llm_response_missing_api_key", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.001024700002744794, "outcome": "passed"}, "call": {"duration": 0.0011448000004747882, "outcome": "passed"}, "teardown": {"duration": 0.0010258999973302707, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unexpected_shapes_empty_choices", "lineno": 55, "outcome": "passed", "keywords": ["test_get_llm_response_unexpected_shapes_empty_choices", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0009263000101782382, "outcome": "passed"}, "call": {"duration": 0.0009892000089166686, "outcome": "passed", "stdout": "Error during LLM call: list index out of range\n"}, "teardown": {"duration": 0.0005004999984521419, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unexpected_shapes_missing_message", "lineno": 62, "outcome": "passed", "keywords": ["test_get_llm_response_unexpected_shapes_missing_message", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0013109999999869615, "outcome": "passed"}, "call": {"duration": 0.0016022999916458502, "outcome": "passed", "stdout": "Error during LLM call: 'NoneType' object has no attribute 'content'\n"}, "teardown": {"duration": 0.0005526000022655353, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_non_string_content", "lineno": 69, "outcome": "passed", "keywords": ["test_get_llm_response_non_string_content", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0007129000005079433, "outcome": "passed"}, "call": {"duration": 0.0009395999950356781, "outcome": "passed", "stdout": "Error during LLM call: 'dict' object has no attribute 'strip'\n"}, "teardown": {"duration": 0.000574399993638508, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_unicode_and_strip", "lineno": 78, "outcome": "passed", "keywords": ["test_get_llm_response_unicode_and_strip", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0014953000063542277, "outcome": "passed"}, "call": {"duration": 0.0004121000092709437, "outcome": "passed"}, "teardown": {"duration": 0.00037959999463055283, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_get_llm_response_temperature_and_params_passed", "lineno": 87, "outcome": "xfailed", "keywords": ["test_get_llm_response_temperature_and_params_passed", "xfail", "pytestmark", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0005563000013353303, "outcome": "passed"}, "call": {"duration": 0.0005278000026009977, "outcome": "skipped", "crash": {"path": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main\\tests\\test_llm_tils_edge_cases.py", "lineno": 92, "message": "TypeError: get_llm_response() got an unexpected keyword argument 'temperature'"}, "traceback": [{"path": "tests\\test_llm_tils_edge_cases.py", "lineno": 92, "message": "TypeError"}], "longrepr": "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001ED176F2950>\n\n    @pytest.mark.xfail(reason=\"function doesn't accept temperature/top_p right now\")\n    def test_get_llm_response_temperature_and_params_passed(monkeypatch):\n        client = FakeOpenAIClient(api_key=\"k\")\n        monkeypatch.setattr(L, \"OpenAI\", lambda *a, **k: client, raising=True)\n>       _ = L.get_llm_response(\"hello\", temperature=0.2, max_tokens=256, top_p=0.9)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       TypeError: get_llm_response() got an unexpected keyword argument 'temperature'\n\ntests\\test_llm_tils_edge_cases.py:92: TypeError"}, "teardown": {"duration": 0.001025399993523024, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_missing_template_file", "lineno": 100, "outcome": "passed", "keywords": ["test_build_prompt_missing_template_file", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.007150200006435625, "outcome": "passed"}, "call": {"duration": 0.0005058999959146604, "outcome": "passed"}, "teardown": {"duration": 0.00037959999463055283, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_encoding_issues", "lineno": 104, "outcome": "passed", "keywords": ["test_build_prompt_encoding_issues", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0020989000040572137, "outcome": "passed"}, "call": {"duration": 0.0021309000003384426, "outcome": "passed"}, "teardown": {"duration": 0.00036359998921398073, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_placeholder_collision_raises", "lineno": 125, "outcome": "passed", "keywords": ["test_build_prompt_placeholder_collision_raises", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.002587499999208376, "outcome": "passed"}, "call": {"duration": 0.0015159999893512577, "outcome": "passed"}, "teardown": {"duration": 0.0004478000046219677, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_subcategories_none_and_strings_ok", "lineno": 136, "outcome": "passed", "keywords": ["test_build_prompt_subcategories_none_and_strings_ok", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0030107999918982387, "outcome": "passed"}, "call": {"duration": 0.0017023000109475106, "outcome": "passed"}, "teardown": {"duration": 0.001195499993627891, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_build_prompt_handles_newlines_and_commas", "lineno": 149, "outcome": "passed", "keywords": ["test_build_prompt_handles_newlines_and_commas", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.003726499999174848, "outcome": "passed"}, "call": {"duration": 0.0015103000041563064, "outcome": "passed"}, "teardown": {"duration": 0.001338200003374368, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_default_api_key_path_headers", "lineno": 190, "outcome": "passed", "keywords": ["test_pplx_default_api_key_path_headers", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.00136749999364838, "outcome": "passed"}, "call": {"duration": 0.0004366999928606674, "outcome": "passed"}, "teardown": {"duration": 0.00037739999243058264, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_http_error_returns_json_anyway", "lineno": 199, "outcome": "passed", "keywords": ["test_pplx_http_error_returns_json_anyway", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0006884999893372878, "outcome": "passed"}, "call": {"duration": 0.0008648000075481832, "outcome": "passed"}, "teardown": {"duration": 0.00050149999151472, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_non_json_response_raises", "lineno": 205, "outcome": "passed", "keywords": ["test_pplx_non_json_response_raises", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0006908000068506226, "outcome": "passed"}, "call": {"duration": 0.0005151000077603385, "outcome": "passed"}, "teardown": {"duration": 0.00035089999437332153, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_unexpected_json_shape_passthrough", "lineno": 211, "outcome": "passed", "keywords": ["test_pplx_unexpected_json_shape_passthrough", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0008457999938400462, "outcome": "passed"}, "call": {"duration": 0.0005335000023478642, "outcome": "passed"}, "teardown": {"duration": 0.0005541999998968095, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_payload_correctness", "lineno": 217, "outcome": "passed", "keywords": ["test_pplx_payload_correctness", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0011615000112215057, "outcome": "passed"}, "call": {"duration": 0.0007697999972151592, "outcome": "passed"}, "teardown": {"duration": 0.0004512000014074147, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_pplx_headers_when_api_key_param_used", "lineno": 227, "outcome": "passed", "keywords": ["test_pplx_headers_when_api_key_param_used", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0007026999955996871, "outcome": "passed"}, "call": {"duration": 0.0008455999923171476, "outcome": "passed"}, "teardown": {"duration": 0.0005257000011624768, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_root_array", "lineno": 236, "outcome": "passed", "keywords": ["test_verify_and_fix_json_root_array", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.00039149999793153256, "outcome": "passed"}, "call": {"duration": 0.0029968999879201874, "outcome": "passed"}, "teardown": {"duration": 0.0005302999925334007, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_with_cpp_style_comments", "lineno": 242, "outcome": "xfailed", "keywords": ["test_verify_and_fix_json_with_cpp_style_comments", "xfail", "pytestmark", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0004420999903231859, "outcome": "passed"}, "call": {"duration": 0.008948499991674908, "outcome": "skipped", "crash": {"path": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main\\tests\\test_llm_tils_edge_cases.py", "lineno": 246, "message": "assert (False)"}, "traceback": [{"path": "tests\\test_llm_tils_edge_cases.py", "lineno": 246, "message": "AssertionError"}], "longrepr": "@pytest.mark.xfail(reason=\"Comments not stripped yet\")\n    def test_verify_and_fix_json_with_cpp_style_comments():\n        ok, out = L.verify_and_fix_json('{ /* note */ \"a\": 1, // end\\n \"b\": 2 }')\n>       assert ok and out == {\"a\": 1, \"b\": 2}\nE       assert (False)\n\ntests\\test_llm_tils_edge_cases.py:246: AssertionError"}, "teardown": {"duration": 0.00038729999505449086, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_single_quotes", "lineno": 247, "outcome": "xfailed", "keywords": ["test_verify_and_fix_json_single_quotes", "xfail", "pytestmark", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0004067999980179593, "outcome": "passed"}, "call": {"duration": 0.0006534999993164092, "outcome": "skipped", "crash": {"path": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main\\tests\\test_llm_tils_edge_cases.py", "lineno": 251, "message": "assert (False)"}, "traceback": [{"path": "tests\\test_llm_tils_edge_cases.py", "lineno": 251, "message": "AssertionError"}], "longrepr": "@pytest.mark.xfail(reason=\"Single quotes not normalized yet\")\n    def test_verify_and_fix_json_single_quotes():\n        ok, out = L.verify_and_fix_json(\"{ 'a': 1, 'b': 'two' }\")\n>       assert ok and out == {\"a\": 1, \"b\": \"two\"}\nE       assert (False)\n\ntests\\test_llm_tils_edge_cases.py:251: AssertionError"}, "teardown": {"duration": 0.0004110999871045351, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_python_literals", "lineno": 252, "outcome": "xfailed", "keywords": ["test_verify_and_fix_json_python_literals", "xfail", "pytestmark", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0005264999927021563, "outcome": "passed"}, "call": {"duration": 0.14639060001354665, "outcome": "skipped", "crash": {"path": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main\\tests\\test_llm_tils_edge_cases.py", "lineno": 256, "message": "AssertionError: assert (True and {'a': 'True', 'b': 'None', 'c': 'False'} == {'a': True, 'b': None, 'c': False}\n  \n  Differing items:\n  \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mb\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mNone\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mb\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mNone\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\n  \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33ma\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mTrue\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33ma\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mTrue\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\n  \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mc\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mFalse\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mc\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mFalse\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\n  \n  Full diff:\n  \u001b[0m\u001b[90m \u001b[39;49;00m {\u001b[90m\u001b[39;49;00m\n  \u001b[91m-     'a': True,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  \u001b[92m+     'a': 'True',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  ?          +    +\u001b[90m\u001b[39;49;00m\n  \u001b[91m-     'b': None,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  \u001b[92m+     'b': 'None',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  ?          +    +\u001b[90m\u001b[39;49;00m\n  \u001b[91m-     'c': False,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  \u001b[92m+     'c': 'False',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  ?          +     +\u001b[90m\u001b[39;49;00m\n  \u001b[90m \u001b[39;49;00m }\u001b[90m\u001b[39;49;00m)"}, "traceback": [{"path": "tests\\test_llm_tils_edge_cases.py", "lineno": 256, "message": "AssertionError"}], "longrepr": "@pytest.mark.xfail(reason=\"Python literals True/False/None not normalized yet\")\n    def test_verify_and_fix_json_python_literals():\n        ok, out = L.verify_and_fix_json('{ \"a\": True, \"b\": None, \"c\": False }')\n>       assert ok and out == {\"a\": True, \"b\": None, \"c\": False}\nE       AssertionError: assert (True and {'a': 'True', 'b': 'None', 'c': 'False'} == {'a': True, 'b': None, 'c': False}\nE         \nE         Differing items:\nE         \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mb\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mNone\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mb\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mNone\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\nE         \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33ma\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mTrue\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33ma\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mTrue\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\nE         \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mc\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[33m'\u001b[39;49;00m\u001b[33mFalse\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m != \u001b[0m{\u001b[33m'\u001b[39;49;00m\u001b[33mc\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m: \u001b[94mFalse\u001b[39;49;00m}\u001b[90m\u001b[39;49;00m\nE         \nE         Full diff:\nE         \u001b[0m\u001b[90m \u001b[39;49;00m {\u001b[90m\u001b[39;49;00m\nE         \u001b[91m-     'a': True,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         \u001b[92m+     'a': 'True',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         ?          +    +\u001b[90m\u001b[39;49;00m\nE         \u001b[91m-     'b': None,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         \u001b[92m+     'b': 'None',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         ?          +    +\u001b[90m\u001b[39;49;00m\nE         \u001b[91m-     'c': False,\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         \u001b[92m+     'c': 'False',\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         ?          +     +\u001b[90m\u001b[39;49;00m\nE         \u001b[90m \u001b[39;49;00m }\u001b[90m\u001b[39;49;00m)\n\ntests\\test_llm_tils_edge_cases.py:256: AssertionError"}, "teardown": {"duration": 0.0003902000025846064, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_trailing_comma_in_array", "lineno": 257, "outcome": "passed", "keywords": ["test_verify_and_fix_json_trailing_comma_in_array", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.00043510000978130847, "outcome": "passed"}, "call": {"duration": 0.0006377999961841851, "outcome": "passed"}, "teardown": {"duration": 0.00035280000884085894, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_triple_backticks_inside_strings_not_eaten", "lineno": 262, "outcome": "passed", "keywords": ["test_verify_and_fix_json_triple_backticks_inside_strings_not_eaten", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0003409999917494133, "outcome": "passed"}, "call": {"duration": 0.00047790000098757446, "outcome": "passed"}, "teardown": {"duration": 0.0003336999943712726, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_multiple_concatenated_objects", "lineno": 267, "outcome": "xfailed", "keywords": ["test_verify_and_fix_json_multiple_concatenated_objects", "xfail", "pytestmark", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.00037429999792948365, "outcome": "passed"}, "call": {"duration": 0.0006304999988060445, "outcome": "skipped", "crash": {"path": "C:\\Users\\suman\\Downloads\\SmallTalk-main (5)\\SmallTalk-main\\tests\\test_llm_tils_edge_cases.py", "lineno": 271, "message": "assert (False)"}, "traceback": [{"path": "tests\\test_llm_tils_edge_cases.py", "lineno": 271, "message": "AssertionError"}], "longrepr": "@pytest.mark.xfail(reason=\"Concatenated objects not merged/array-wrapped\")\n    def test_verify_and_fix_json_multiple_concatenated_objects():\n        ok, out = L.verify_and_fix_json('{\"a\":1}\\n{\"b\":2}')\n>       assert ok and out == [{\"a\": 1}, {\"b\": 2}]\nE       assert (False)\n\ntests\\test_llm_tils_edge_cases.py:271: AssertionError"}, "teardown": {"duration": 0.00037989999691490084, "outcome": "passed"}}, {"nodeid": "tests/test_llm_tils_edge_cases.py::test_verify_and_fix_json_non_string_input_behavior", "lineno": 272, "outcome": "passed", "keywords": ["test_verify_and_fix_json_non_string_input_behavior", "test_llm_tils_edge_cases.py", "tests", "SmallTalk-main", ""], "setup": {"duration": 0.0006526000070152804, "outcome": "passed"}, "call": {"duration": 0.0006243999960133806, "outcome": "passed"}, "teardown": {"duration": 0.0007296999974641949, "outcome": "passed"}}]}